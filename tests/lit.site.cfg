# -*- Python -*-
import os
import re
import subprocess
import lit.llvm

# Return a dictionary that contains a key for each section in the output of `sdcc --print-search-dirs`.
# The value for each key is an array of strings, e.g.
# {
#     'includedir': ['/usr/bin/../share/sdcc/include/pic16', '/usr/share/sdcc/include/pic16', ...],
#     'libdir': ['/usr/bin/../share/sdcc/lib/pic16', '/usr/share/sdcc/lib/pic16', '/usr/bin/../share/sdcc/non-free/lib/pic16'],
#     'libpath': []
# }
def get_sdcc_search_dirs():
    sdcc = subprocess.Popen(["sdcc", "--print-search-dirs", "-mpic16", "--use-non-free"], stdout=subprocess.PIPE)
    sdcc_stdout = sdcc.stdout.read().decode()
    sdcc.wait()

    search_dirs = {}
    section_regex = re.compile('^[^/]+:$')
    for line in sdcc_stdout.splitlines():
        if re.match(section_regex, line):
            section_name = line[:-1]
            search_dirs[section_name] = []
        else:
            search_dirs[section_name] += [line]
    return search_dirs

# Use `cpp` to collect the values for the PP macros in `keys` from `ledmtx_config.h`.
# Return a dictionary of the form `{ 'KEY_1': 'value1', ... }`
def get_config_h_values(path_to_config_h, keys):
    cpp = subprocess.Popen(["cpp", "-P", "-include", path_to_config_h],
                            stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    cpp_stdout = cpp.communicate(input='\n'.join(keys).encode())[0].decode()
    cpp.wait()
    values = cpp_stdout.splitlines()
    return dict(zip(keys, values))

config.sdcc_dirs = get_sdcc_search_dirs()
config.ledmtx_test_dir = os.path.dirname(os.path.realpath(__file__))
config.ledmtx_src_dir = os.path.join(config.ledmtx_test_dir, "..", "src")
config.ledmtx_config_h = get_config_h_values(os.path.join(config.ledmtx_src_dir,
                                                          "..", "include", "ledmtx_config.h"),
                                             [
                                                 'LEDMTX_HAVE_DOUBLE_BUFFER',
                                                 'LEDMTX_HAVE_VIEWPORT'
                                             ])

lit.llvm.initialize(lit_config, config)
lit_config.load_config(config, os.path.join(config.ledmtx_test_dir, "lit.cfg"))
